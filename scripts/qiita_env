#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2014--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click

from qiita_db.environment_manager import (make_environment,
                                          drop_environment,
                                          clean_test_environment,
                                          DFLT_BASE_WORK_FOLDER,
                                          ENVIRONMENTS, CLUSTERS)
from qiita_core.environment_manager import (start_cluster as _start_cluster,
                                            stop_cluster as _stop_cluster)
from qiita_core.configuration_manager import ConfigurationManager


_CONFIG = ConfigurationManager()


@click.group()
def env():
    pass


@env.command()
@click.argument('clusters', required=True, type=click.Choice(CLUSTERS),
                nargs=-1)
def start_cluster(clusters):
    """Start a compute environment"""
    for cluster in clusters:
        print "Starting cluster", cluster
        if cluster == 'demo':
            _start_cluster(_CONFIG.ipyc_demo, _CONFIG.ipyc_demo_n)
        elif cluster == 'reserved':
            _start_cluster(_CONFIG.ipyc_reserved, _CONFIG.ipyc_reserved_n)
        elif cluster == 'general':
            _start_cluster(_CONFIG.ipyc_general, _CONFIG.ipyc_general_n)


@env.command()
@click.argument('clusters', required=True, type=click.Choice(CLUSTERS),
                nargs=-1) 
def stop_cluster(clusters):
    """Stop a compute environment"""
    for cluster in clusters:
        print "Stopping cluster", cluster
        if cluster == 'demo':
            _stop_cluster(_CONFIG.ipyc_demo)
        elif cluster == 'reserved':
            _stop_cluster(_CONFIG.ipyc_reserved)
        elif cluster == 'general':
            _stop_cluster(_CONFIG.ipyc_general)


@env.command()
@click.option('--load-ontologies/--no-load-ontologies',
              default=False, help='If True, ontologies will be loaded')
@click.option('--download-reference/--no-download-reference',
              default=False, help='If True, greengenes reference files will '
                                  'be downloaded')
@click.option('--add-demo-user/--no-add-demo-user',
              default=False, help='If True, then demo@microbio.me will be '
                                  'added to the database with password '
                                  '"password"')
def make(load_ontologies, download_reference, add_demo_user):
    """Creates the database specified in config"""
    # TODO: use password from config, see issue #363
    # Or figure out a way to use
    # http://click.pocoo.org/3/options/#password-prompts
    # and have it work with Travis...
    make_environment(load_ontologies, download_reference, add_demo_user)


@env.command()
def drop():
    """Drops the database specified in config"""
    # TODO: use password from config, see issue #363
    # Or figure out a way to use
    # http://click.pocoo.org/3/options/#password-prompts
    # and have it work with Travis...
    drop_environment()


@env.command()
@click.option('--user', default=_CONFIG.user,
              help="The database user to connect to the database")
@click.option('--host', default=_CONFIG.host,
              help='The host where the database lives')
def clean_test(user, host):
    """Cleans the test database environment.

    In case that the test database is dirty (i.e. the 'qiita' schema is
    present), this cleans it up by dropping the 'qiita' schema.
    """
    clean_test_environment(user, None, host)


if __name__ == '__main__':
    env()
